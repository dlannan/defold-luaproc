-- Luaproc example.
--   The example provides separate examples of using multiple processes to solve concurrent execution problems.
--
--  First test shows how to extract three processes of a http get into three separate files at the same timer.
--   The sample show timing for 3, vs timing for 3 in sequence. 
--  Second test shows the display of three data streams at once into a 'split' buffer (no need for mutexing the output)
--   There are 4 workers outputting data to the 4 quadrants of the screen using 4 different files. 
--  Third test executes 10 workers to execute mandebrot output and the display using it to show a continuous
--   zoom into the mandelbrot. The workers only start when the main thread does a request with params.
--
-- Profiling output is shown on the display if enabled.
--

local NUM_PROCS 	=  10

local mandel = require("example.mandelbrot")

local function split(str, pat)
	local t = {}  -- NOTE: use {n = 0} in Lua-5.0
	local fpat = "(.-)" .. pat
	local last_end = 1
	local s, e, cap = str:find(fpat, 1)
	while s do
	   if s ~= 1 or cap ~= "" then
		  table.insert(t, tonumber(cap))
	   end
	   last_end = e+1
	   s, e, cap = str:find(fpat, last_end)
	end
	if last_end <= #str then
	   cap = str:sub(last_end)
	   table.insert(t, tonumber(cap))
	end
	return t
 end

local function testhttp_noproc(id, testfile)

	-- create a sender lua process
	local fh = io.popen("curl -L --no-progress-meter "..testfile)
	if(fh) then 
		local data = fh:read("*a")
		fh:close()
	end
end	

local function testhttp(id, testfile)

	-- create a sender lua process
	luaproc.newproc( function()

		local fh = io.popen("curl -L --no-progress-meter "..testfile)
		if(fh) then 
			local data = fh:read("*a")
			luaproc.send( "master_channel", data )
			fh:close()
			luaproc.send( "master_channel", "COMPLETE" )
		end
	end )
end	

local function testgui(id, testfile)

	-- create a sender lua process
	luaproc.newproc( function()
		
		local fh = io.open("example/data/"..testfile, "r")
		if(fh) then 
			local line = fh:read(80)
			while(line) do
				luaproc.send( "gui"..id.."_channel", line )
				line = fh:read(80)
			end
			fh:close()
		end
		-- Send a couple of blank lines at end 
		luaproc.send( "gui"..id.."_channel", " \n \n" )
	end )
end	

local function rendermandel(extents, zoom, id)

	-- pprint((action.x - 480).."  "..(action.y - 320))
	-- create a sender lua process

	local wide = (extents.x2 - extents.x1)
	local high = (extents.y2 - extents.y1)

	-- local posx = ((action.x - 480) / 296) * wide * 0.5
	-- local posy = ((action.y - 320) / 296) * high * 0.5
	-- posx = posx + wide * 0.5 + self.extents.x1 -- offset from center
	-- posy = posy + high * 0.5 + self.extents.y1
	-- print(posx, posy)

	local posx = -1.4092667891257 -- -1.6
	local posy = 0

	local halfw = wide * zoom
	local halfh = high * zoom
	newextents = {
		x1 = posx - halfw, y1 = posy - halfh,
		x2 = posx + halfw, y2 = posy + halfh,
	}
	
	luaproc.newproc( function()

		local x1, y1, x2, y2 = luaproc.receive("mandel_channel")
		
		package.path = package.path..[[;F:\dev\defold\repos\defold-luaproc\example\?.lua]]
		local tmandel = require("example.mandelbrot")
		tmandel.setup( 256, 256, 1, true )
		tmandel.makeframe( 1, { x1 = x1, y1 = y1, x2 = x2, y2 = y2 } )
		local buff = table.concat(tmandel.frames[1].buffer, ",")
		luaproc.send( "master_channel", "FRAME"..buff)
	end )	

	luaproc.send("mandel_channel", newextents.x1, newextents.y1, newextents.x2, newextents.y2 )
	return newextents
end

function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post("@render:", "use_camera_projection")
	msg.post("/camera#camera", "acquire_camera_focus")

	mandel.setup( 256, 256, 1 )
	mandel.makeframe( 1 )
	mandel.setframebuffer(1)
	
	-- create an additional worker
	luaproc.setnumworkers( NUM_PROCS )		

	-- This is the channel workers report their status to
	luaproc.newchannel( "master_channel" )
	luaproc.newchannel( "mandel_channel" )

	luaproc.newchannel( "gui1_channel" )
	luaproc.newchannel( "gui2_channel" )
	luaproc.newchannel( "gui3_channel" )
	luaproc.newchannel( "gui4_channel" )
	
	pprint(luaproc)
	self.complete = 0
	self.zoom = 0.5

	self.extents = {
		x1 = -2.2, y1 = -1.4,
		x2 = 1.1, y2 = 1.4,
	}

	self.reqframes = 0
	self.totalframes = 0
end

function final(self)

	luaproc.delchannel( "master_channel" )
	luaproc.delchannel( "mandel_channel" )

	luaproc.delchannel( "gui1_channel" )
	luaproc.delchannel( "gui2_channel" )
	luaproc.delchannel( "gui3_channel" )
	luaproc.delchannel( "gui4_channel" )	
end

function update(self, dt)

	-- Check the channel if it has pending messages
	local res = luaproc.receive( "master_channel", true )
	-- if(res) then pprint(res) end
	if(res == "COMPLETE") then 
		self.complete = self.complete + 1
		if(self.complete == 3) then 
			print( "TOTAL LUAPROC COMPLETE: "..(os.clock()-self.tstart).." secs" )
		end 
	end

	if(res) then 
		local data = string.match(res, "^FRAME(.*)")
		if(data) then 
			mandel.frames[1].buffer = split(data, ",")
			mandel.setframebuffer(1)
			self.reqframes = self.reqframes - 1 
			self.totalframes = self.totalframes + 1
			pprint(self.totalframes.. "    "..self.reqframes)
		end 
	end

	if(self.reqframes < NUM_PROCS and self.totalframes < 220) then 
		self.extents = rendermandel(self.extents, self.zoom, 1)
		self.zoom = self.zoom*math.pow( 0.9, 0.01)
		self.reqframes = self.reqframes + 1
	end

	local gui1res = luaproc.receive( "gui1_channel", true )
	if(gui1res) then msg.post("/gui", "gui1text", { line = gui1res }) end
	local gui2res = luaproc.receive( "gui2_channel", true )
	if(gui2res) then msg.post("/gui", "gui2text", { line = gui2res }) end
	local gui3res = luaproc.receive( "gui3_channel", true )
	if(gui3res) then msg.post("/gui", "gui3text", { line = gui3res }) end
	local gui4res = luaproc.receive( "gui4_channel", true )
	if(gui4res) then msg.post("/gui", "gui4text", { line = gui4res }) end

end

function on_message(self, message_id, message, sender)

end

function on_input(self, action_id, action)

	-- Test luaproc multiple fetches iof csv files. Note: the luaproc version actually sends all the data on the channel as well!
	if(action_id == hash("1_key") and action.released) then 

		self.tstart = os.clock()
		testhttp("1", "https://freetestdata.com/wp-content/uploads/2021/09/Free_Test_Data_200KB_CSV-1.csv")
		testhttp("2", "https://freetestdata.com/wp-content/uploads/2021/09/Free_Test_Data_300KB_CSV-1.csv")
		testhttp("3", "https://freetestdata.com/wp-content/uploads/2021/09/Free_Test_Data_500KB_CSV-1.csv")
	end 

	-- Test no lua proc of same files fetched sequentially - noting there is nothing done with the data like luaproc.
	if(action_id == hash("2_key") and action.released) then 
	
		self.tstart = os.clock()
		testhttp_noproc("1", "https://freetestdata.com/wp-content/uploads/2021/09/Free_Test_Data_200KB_CSV-1.csv")
		testhttp_noproc("2", "https://freetestdata.com/wp-content/uploads/2021/09/Free_Test_Data_300KB_CSV-1.csv")
		testhttp_noproc("3", "https://freetestdata.com/wp-content/uploads/2021/09/Free_Test_Data_500KB_CSV-1.csv")
		print( "TOTAL NOPROC COMPLETE: "..(os.clock()-self.tstart).." secs" )
	end

	-- Test 4 luaprocs outputting four different files to four panels at once 
	if(action_id == hash("3_key") and action.released) then 

		msg.post("/gui", "enable_gui")
		testgui("1", "File-5xkZz.txt")
		testgui("2", "File-aPqTB.txt")
		testgui("3", "File-feL9l.txt")
		testgui("4", "File-jGRqG.txt")
	end

	-- Choose a mandebrot position and zoom to it. Roughly a 2x zoom
	if(action_id == hash("touch") and action.released) then 
		self.extents = rendermandel(self.extents,  self.zoom, 1)
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end

